initSidebarItems({"enum":[["Expression","The enum used to have common functions for different Types"]],"fn":[["any","Any of the given characters"],["any_of","See any()"],["anything","Any character zero or more times"],["anything_but","Any character zero or more times except the provided characters"],["br","A line break!"],["capture","Find a specific string and capture it (will get escaped)"],["capture_expr","Find an expression and capture it"],["digit","Add the token for matching digits"],["end_of_line","Add a token for the end of a line"],["find","Find a specific string"],["find_expr","Find an expression"],["line_break","A line break!"],["maybe","Any string either one or zero times"],["maybe_expr","Any string either one or zero times"],["range","A range of characters e.g. [A-Z] Usage example: verex.range(vec![('a', 'z'),('A', 'Z')])"],["search_one_line","Toggle whether ^ and $ match line start and end or string start and end"],["something","Any character at least one time"],["something_but","Any character at least one time except for these characters"],["start_of_line","Add a token for the start of a line"],["tab","Add a token for a tab"],["with_any_case","Toggle whether to match case-sensitively or not"],["word","Any alphanumeric characters"]],"macro":[["or!","Match any of the given values"],["or_expr!","Match any of the given sub-expressions"]],"struct":[["Verex","The struct used for building verbal expression objects"]]});